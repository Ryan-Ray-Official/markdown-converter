name: Rust CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: markdown_converter
            asset_name: markdown_converter-linux-amd64
            zip_name: markdown_converter-linux-amd64.zip
          - os: windows-latest
            artifact_name: markdown_converter.exe
            asset_name: markdown_converter-windows-amd64.exe
            zip_name: markdown_converter-windows-amd64.zip
          - os: macos-latest
            artifact_name: markdown_converter
            asset_name: markdown_converter-macos-amd64
            zip_name: markdown_converter-macos-amd64.zip

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build release
        run: cargo build --release --verbose

      - name: Prepare release directory
        shell: bash
        run: |
          mkdir release
          cp target/release/${{ matrix.artifact_name }} release/
          cp README.md release/
          cp LICENSE release/
          cp -r assets release/

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: Compress-Archive -Path release/* -DestinationPath ${{ matrix.zip_name }}

      - name: Install zip (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y zip

      - name: Install zip (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install zip

      - name: Create zip (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cd release && zip -r ../${{ matrix.zip_name }} ./*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.zip_name }}

  release:
    name: Create Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            markdown_converter-linux-amd64/markdown_converter-linux-amd64.zip
            markdown_converter-windows-amd64.exe/markdown_converter-windows-amd64.zip
            markdown_converter-macos-amd64/markdown_converter-macos-amd64.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
